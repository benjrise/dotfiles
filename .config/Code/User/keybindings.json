// Place your key bindings in this file to override the defaults

[
    // For selection in lists and intellisense
  {
    "key": "j",
    "command": "list.focusDown",
    "when": "listFocus && explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "k",
    "command": "list.focusUp",
    "when": "listFocus && explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "tab",
    "command": "list.select",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenNavigateNext",
    "when": "inQuickOpen"
  },
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "tab",
    "command": "workbench.action.quickOpenNavigateNext",
    "when": "inQuickOpen"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "shift+tab",
    "command": "workbench.action.quickOpenNavigatePrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "l",
    "command": "list.select",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "o",
    "command": "list.toggleExpand",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "h",
    "command": "list.collapse",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+;",
    "command": "insertPrevSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "key": "ctrl+l",
    "when": "sideBarFocus",
    "command": "workbench.action.focusActiveEditorGroup"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+t",
    "command": "workbench.action.terminal.focus",
    "when": "!terminalFocus"
  },
  // {
  //   "key": "ctrl+j",
  //   "command": "-editor.action.insertLineAfter",
  //   "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
  // },
  {
    "key": "alt+j",
    "command": "workbench.action.terminal.focus",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+t",
    "command": "workbench.action.togglePanel"
  },
  // {
  //   "key": "ctrl+j",
  //   "command": "-workbench.action.togglePanel"
  // },
  {
    "key": "shift+tab",
    "command": "-acceptAlternativeSelectedSuggestion",
      "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
  },
  {
  "key":"ctrl+j",
  "command": "workbench.action.terminal.focus",
  "when": "editorTextFocus && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
  },
  {
      "key": "alt+k",
      "command": "-keybindings.editor.recordSearchKeys",
      "when": "inKeybindings && inKeybindingsSearch"
  },
  {
      "key": "alt+j",
          "command": "editor.action.moveLinesDownAction",
      "when": "editorTextFocus && !editorReadonly"
  },
  {
      "key": "alt+down",
      "command": "-editor.action.moveLinesDownAction",
      "when": "editorTextFocus && !editorReadonly"
  },
  {
      "key": "alt+k",
      "command": "editor.action.moveLinesUpAction",
      "when": "editorTextFocus && !editorReadonly"
  },
  {
      "key": "alt+up",
      "command": "-editor.action.moveLinesUpAction",
      "when": "editorTextFocus && !editorReadonly"
  },
  {
      "key": "ctrl+shift+c",
      "command": "-workbench.action.terminal.openNativeConsole",
      "when": "!terminalFocus"
  },
  {
      "key": "ctrl+shift+c",
      "command": "-workbench.action.terminal.copySelection",
      "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected"
  },
  {
      "key": "ctrl+shift+c",
      "command": "editor.action.clipboardCopyAction"
  },
  {
      "key": "ctrl+c",
      "command": "-editor.action.clipboardCopyAction"
  },
  {
      "key": "ctrl+2",
      "command": "-workbench.action.focusSecondEditorGroup"
  },
  {
      "key": "ctrl+4",
      "command": "editor.action.changeAll",
      "when": "editorTextFocus && !editorReadonly"
  },
  {
      "key": "ctrl+f2",
      "command": "-editor.action.changeAll",
      "when": "editorTextFocus && !editorReadonly"
  },
  {
      "key": "ctrl+shift+2",
      "command": "-extension.vim_ctrl+shift+2",
      "when": "editorTextFocus && vim.active && vim.use<C-shift+2>"
  },
  {
      "key": "ctrl+shift+2",
      "command": "-workbench.action.terminal.sendSequence",
      "when": "terminalFocus"
  },
  {
      "key": "ctrl+shift+x",
      "command": "-workbench.view.extensions",
      "when": "viewContainer.workbench.view.extensions.enabled"
  },
  {
      "key": "ctrl+shift+x",
      "command": "editor.action.clipboardCutAction"
  },
  {
      "key": "ctrl+x",
      "command": "-editor.action.clipboardCutAction"
  },
  {
      "key": "ctrl+shift+v",
      "command": "editor.action.clipboardPasteAction"
  },
  {
      "key": "ctrl+v",
      "command": "-editor.action.clipboardPasteAction"
  },
  {
      "key": "shift+alt+k",
      "command": "editor.action.copyLinesDownAction",
      "when": "editorTextFocus && !editorReadonly"
  },
  {
      "key": "ctrl+shift+alt+down",
      "command": "-editor.action.copyLinesDownAction",
      "when": "editorTextFocus && !editorReadonly"
  },
  {
      "key": "shift+alt+j",
      "command": "editor.action.copyLinesUpAction",
      "when": "editorTextFocus && !editorReadonly"
  },
  {
      "key": "ctrl+shift+alt+up",
      "command": "-editor.action.copyLinesUpAction",
      "when": "editorTextFocus && !editorReadonly"
  },
  {
      "key": "ctrl+tab",
      "command": "workbench.action.nextEditor"
  },
  {
      "key": "ctrl+shift+tab",
      "command": "workbench.action.previousEditor"
  },
  {
      "key": "ctrl+w",
      "command": "-workbench.action.closeGroup",
      "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
      "key": "ctrl+w",
      "command": "-extension.vim_ctrl+w",
      "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
  },
    ///////////////////////////
    // Debugging keybindings //
    ///////////////////////////
    // Debugger <C-1> step over, <C-2> step into, <C-`> continue
    {
        "key": "f12",
        "command": "-editor.gotoNextSymbolFromResult",
        "when": "hasSymbols"
    },
    {
        "key": "ctrl+1",
        "command": "-workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "ctrl+1",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f10",
        "command": "-workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "ctrl+4",
        "command": "-workbench.action.focusFourthEditorGroup"
    },
    {
        "key": "ctrl+3",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f11",
        "command": "-workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "ctrl+2",
        "command": "extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "f11",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+2",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    // Save all files
    {
        "key": "ctrl+shift+s",
        "command": "workbench.action.files.saveFiles"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    // Navigate foreward and backward in time
    {
        "key": "ctrl+i",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+o",
        "command": "workbench.action.navigateBack"
    },
    
    /////////////////////////////////////////////////////
    // Disable equivalent forward and backward commands//
    /////////////////////////////////////////////////////
    {
        "key": "ctrl+o",
        "command": "-extension.vim_ctrl+o",
        "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openLocalFile",
        "when": "remoteFileDialogVisible"
    },

    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFolderViaWorkspace",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
    },
    {
        "key": "ctrl+i",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+i",
        "command": "-focusSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && !config.editor.suggest.selectQuickSuggestions && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+i",
        "command": "-toggleSuggestionDetails",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+i",
        "command": "-extension.vim_ctrl+i",
        "when": "editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl"
    },
    {
      "key": "ctrl+b",
      "command": "-extension.vim_ctrl+b",
      "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
      "key": "ctrl+b",
      "command": "editor.debug.action.toggleBreakpoint",
      "when": "debuggersAvailable && editorTextFocus"
    },
    {
      "key": "f9",
      "command": "-editor.debug.action.toggleBreakpoint",
      "when": "debuggersAvailable && editorTextFocus"
    },
    {
      "key": "ctrl+shift+b",
      "command": "-workbench.action.tasks.build",
      "when": "taskCommandsRegistered"
    },
    {
      "key": "ctrl+shift+b",
      "command": "editor.debug.action.toggleInlineBreakpoint",
      "when": "editorTextFocus"
    },
    {
      "key": "shift+f9",
      "command": "-editor.debug.action.toggleInlineBreakpoint",
      "when": "editorTextFocus"
    },
    {
      "key": "ctrl+r",
      "command": "editor.action.startFindReplaceAction",
      "when": "editorFocus || editorIsOpen"
    },
    {
      "key": "ctrl+h",
      "command": "-editor.action.startFindReplaceAction",
      "when": "editorFocus || editorIsOpen"
    },
    {
      "key": "ctrl+f",
      "command": "-extension.vim_ctrl+f",
      "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
      "key": "ctrl+b",
      "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
      "key": "shift+enter",
      "command": "editor.action.replaceAll",
      "when": "editorFocus && findWidgetVisible"
    },
    {
      "key": "ctrl+alt+enter",
      "command": "-editor.action.replaceAll",
      "when": "editorFocus && findWidgetVisible"
    },
    {
      "key": "tab",
      "command": "list.select",
      "when": "listFocus && !inputFocus"
    },
    {
      "key": "enter",
      "command": "-list.select",
      "when": "listFocus && !inputFocus"
    },
    {
      "key": "tab",
      "command": "acceptSelectedSuggestion",
      "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
      "key": "enter",
      "command": "-acceptSelectedSuggestion",
      "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
      "key": "ctrl+i",
      "command": "-editor.action.triggerSuggest",
      "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
      "key": "k k",
      "command": "editor.action.inlineSuggest.commit",
      "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
    },
    {
      "key": "tab",
      "command": "-editor.action.inlineSuggest.commit",
      "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
    },
    /////////////////////////////////////////////////////
    // Disable equivalent forward and backward commands//
    /////////////////////////////////////////////////////
]